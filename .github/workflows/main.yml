name: Build libc++_shared v7a Optimized

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      NDK_VERSION: r21d # 保持 r21d
      ABI: armeabi-v7a
      ANDROID_API: 21
      BUILD_DIR: build
      NDK_ROOT: $HOME/android-ndk # 定义 NDK 路径

    steps:
    - name: Checkout LLVM
      uses: actions/checkout@v4
      with:
        repository: llvm/llvm-project
        ref: llvmorg-12.0.0 # 保持 12.0.0
        path: llvm-project

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ninja-build cmake unzip curl

    - name: Download NDK
      run: |
        curl -LO https://dl.google.com/android/repository/android-ndk-${NDK_VERSION}-linux-x86_64.zip
        unzip android-ndk-${NDK_VERSION}-linux-x86_64.zip
        mv android-ndk-${NDK_VERSION} $HOME/android-ndk
        rm android-ndk-${NDK_VERSION}-linux-x86_64.zip

    - name: Configure CMake (armeabi-v7a)
      run: |
        # NDK r21d 的工具链路径有所不同
        # 这里的路径是基于 NDK r21d 的默认布局
        export TOOLCHAIN_PATH=$NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin
        export TRIPLE=armv7a-linux-androideabi # NDK r21d 的 target triple
        export CLANG_BIN=$TOOLCHAIN_PATH/clang
        export CLANGXX_BIN=$TOOLCHAIN_PATH/clang++

        # 设置环境变量，确保 CMake 使用 NDK r21d 的 Clang
        export CC=$CLANG_BIN
        export CXX=$CLANGXX_BIN
        export AR=$TOOLCHAIN_PATH/llvm-ar
        export RANLIB=$TOOLCHAIN_PATH/llvm-ranlib
        export STRIP=$TOOLCHAIN_PATH/llvm-strip

        # NDK r21d 的 sysroot 路径
        export SYSROOT=$NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/sysroot

        mkdir -p $BUILD_DIR

        cmake -S llvm-project/runtimes -B $BUILD_DIR \
          -G Ninja \
          -DCMAKE_TOOLCHAIN_FILE=$NDK_ROOT/build/cmake/android.toolchain.cmake \
          -DANDROID_ABI=$ABI \
          -DANDROID_PLATFORM=$ANDROID_API \
          -DCMAKE_BUILD_TYPE=Release \
          -DLLVM_ENABLE_RUNTIMES="libcxx;libcxxabi" \
          -DLIBCXX_ENABLE_SHARED=ON \
          -DLIBCXX_ENABLE_STATIC=OFF \
          -DLIBCXXABI_ENABLE_SHARED=ON \
          -DLIBCXXABI_ENABLE_STATIC=OFF \
          -DLIBCXXABI_USE_LLVM_UNWINDER=OFF \
          -DLIBCXX_USE_COMPILER_RT=ON \
          -DLIBCXX_INCLUDE_TESTS=OFF \
          -DCMAKE_C_FLAGS="-fPIC -Wno-cast-qual -Wno-error --sysroot=$SYSROOT" \
          -DCMAKE_CXX_FLAGS="-fPIC -Wno-cast-qual -Wno-error --sysroot=$SYSROOT -std=c++17 -D_LIBCPP_HAS_MUSL_LIBC" \
          -DCMAKE_SHARED_LINKER_FLAGS="-Wl,-z,max-page-size=0x4000" \
          -DCMAKE_SYSTEM_NAME=Android \
          -DCMAKE_SYSTEM_VERSION=$ANDROID_API \
          -DCMAKE_ANDROID_ARCH_ABI=$ABI \
          -DCMAKE_ANDROID_NDK=$NDK_ROOT \
          -DCMAKE_ANDROID_STANDALONE_TOOLCHAIN=$NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64 \
          -DCMAKE_SYSROOT=$SYSROOT \
          -DCMAKE_C_COMPILER_TARGET=$TRIPLE \
          -DCMAKE_CXX_COMPILER_TARGET=$TRIPLE \
          -DCMAKE_CROSSCOMPILE=TRUE \
          -DLLVM_DEFAULT_TARGET_TRIPLE=$TRIPLE \
          -DLIBCXX_ENABLE_LITE_MODE=ON # 尝试启用精简模式
        # 移除了 NDK r21d 中不存在的 `armv7a-linux-androideabi$ANDROID_API-clang` 命名约定
        # 直接使用 `clang` 和 `clang++`，并通过 `--sysroot` 明确指定
        # 增加了一些针对 Android 交叉编译更明确的 CMake 变量设置
        # 尝试启用 LIBCXX_ENABLE_LITE_MODE, 可能会减少对 C 库的依赖

    - name: Build libc++_shared
      run: cmake --build $BUILD_DIR --target cxxabi_shared cxx_shared -j$(nproc)

    - name: Package artifact
      uses: actions/upload-artifact@v4
      with:
        name: libcxx-v7a-optimized
        path: $BUILD_DIR/lib/*.so
        # 或者更精确的路径，如：
        # path: |
        #   ${BUILD_DIR}/${ABI}/libcxxabi_shared/libc++abi.so
        #   ${BUILD_DIR}/${ABI}/libcxx_shared/libc++_shared.so
        # 具体路径需要查看构建后的目录结构
